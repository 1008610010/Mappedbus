{"name":"Mappedbus","tagline":"IPC between multiple Java processes with nanosecond latency","body":"## MappedBus is a Java based high throughput, low latency message bus, using either a memory mapped file or shared memory as transport\r\n\r\nMappedBus was inspired by [Java Chronicle](https://github.com/OpenHFT/Chronicle-Queue) with the main difference that it's designed to efficiently support multiple writers â€“ enabling use cases where the order of messages produced by multiple processes are important.\r\n\r\n<p align=\"center\">\r\n  <img src=\"http://3.bp.blogspot.com/-L51XiyruNMA/VU5K9dMtx9I/AAAAAAAAACg/AOkdwjTrzgI/s320/mappedbus.png\">\r\n</p>\r\n\r\nMappedBus can also be described as an efficient IPC mechanism which enable several Java processes/JVMs to communicate by message passing.\r\n\r\nThe throughput (on a laptop, i7-4558U @ 2.8 GHZ) between a single producer writing at full speed and a single consumer is around 40 million messages per second (a small message consisting of three integer fields), and the average read/write latency is around 25 ns per message.\r\n\r\nMappedBus does not create any objects after startup and therefore has no GC impact.\r\n\r\n#### Features:\r\n* IPC between multiple processes by message passing\r\n* Support for either a memory mapped file or shared memory as transport\r\n* Support for either object or byte array (raw data) based messages\r\n\r\n### Getting Started\r\n\r\nDownload mappedbus.jar from the release tab (or clone the project and build it from source by running \"ant\") and try out any of the sample applications described below.\r\n\r\n### Usage\r\n\r\nSetup a reader and a writer:\r\n```java\r\n// Setup a reader\r\nMappedBusReader reader = new MappedBusReader(\"/tmp/test\", 100000L, 32);\r\nreader.open();\r\n\r\n// Setup a writer\r\nMappedBusWriter writer = new MappedBusWriter(\"/tmp/test\", 100000L, 32, true);\r\nwriter.open();\r\n```\r\n\r\nIn the code above the file \"/tmp/test\" is on disk and thus it's memory mapped by the library. To instead use the library with shared memory, point to a file in \"/dev/shm\", for example, \"/dev/shm/test\".\r\n\r\nWhen using a memory mapped file the messages will be lazily persisted to disk. With shared memory the messages will instead be stored in the RAM.\r\n<br><br>\r\nRead/write messages using objects:\r\n```java\r\nPriceUpdate priceUpdate = new PriceUpdate();\r\n\r\n// write a message\r\nwriter.write(priceUpdate);\r\n\r\n// read messages\r\nwhile (true) {\r\n   if (reader.next()) {\r\n      int type = reader.readType();\r\n      if (type == 0) {\r\n         reader.readMessage(priceUpdate)\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nRead/write messages using byte arrays:\r\n```java\r\nbyte[] buffer = new byte[32];\r\n\r\n// write a buffer\r\nwriter.write(buffer, 0, buffer.length);\r\n\r\n// read buffers\r\nwhile (true) {\r\n   if (reader.next()) {\r\n      int length = reader.read(buffer, 0);\r\n   }\r\n}\r\n```\r\n\r\n### Examples\r\n\r\nThe project contains examples of an object based and a byte array based reader/writer.\r\n\r\nThe object based one work as follows. The ObjectWriter class will send a message, PriceUpdate, which contains three fields: source, price and quantity. The first argument of the ObjectWriter is used to populate the source. The ObjectReader simply prints every message it receives.\r\n\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.object.ObjectWriter 0\r\n...\r\n```\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.object.ObjectWriter 1\r\n...\r\n```\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.object.ObjectReader\r\n...\r\nRead: PriceUpdate [source=0, price=20, quantity=40]\r\nRead: PriceUpdate [source=1, price=8, quantity=16]\r\nRead: PriceUpdate [source=0, price=22, quantity=44]\r\n```\r\n\r\nThe byte array based example is run in the same way.\r\n\r\nAnother example simulates a token passed around between a number of nodes. Each node will send a message, Token, which contains two fields: to and from. When a node receives a token it will check whether it's the receiver and if so it will send a new token message with the \"to\" field set to it's id + 1 mod \"number of nodes\".\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.token.Token 0 3\r\nRead: Token [from=0, to=1]\r\nRead: Token [from=1, to=2]\r\n...\r\n```\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.token.Token 1 3\r\nRead: Token [from=0, to=1]\r\nRead: Token [from=1, to=2]\r\n...\r\n```\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.sample.token.Token 2 3\r\nRead: Token [from=0, to=1]\r\nRead: Token [from=1, to=2]\r\n...\r\n```\r\n\r\n\r\n### Performance\r\n\r\nThe project contains a performance test which can be run as follows:\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.perf.MessageWriter /home/youraccount/tmp/test\r\n...\r\n```\r\n```\r\n> java -cp mappedbus.jar se.caplogic.mappedbus.perf.MessageReader /home/youraccount/tmp/test\r\nElapsed: 1801 ms\r\nPer op: 22 ns\r\nOp/s: 44404868\r\n```\r\n\r\n### Implementation\r\n\r\nHere's how MappedBus solves the synchronization problem between multiple writers (each running in it's own process/JVM):\r\n\r\n* The first eight bytes of the file make up a field called the limit. This field specifies how much data has actually been written to the file. The readers will poll the limit field (using volatile) to see whether there's a new record to be read.\r\n\r\n* When a writer wants to add a record to the file it will first read the limit field (using volatile) and then use CAS to increase the limit field (specifying the value of the last limit it could see). By using CAS the writer will know whether it has succeeded in updating the limit field or not (in other words, whether the limit it specified in the CAS operation was still valid). If the CAS operation fails it means another writer succeeded in updating the limit field first, and in this case the writer which failed will retry the operation.\r\n\r\n* When the limit field has increased a reader will know there's new data to be read, but the writer which updated the limit field might not yet have written any data in the record. To avoid this problem each record contains an initial 4 bytes which make up the commit field.\r\n\r\n* When a writer has finished writing a record it will set the commit field (using volatile) and the reader will only start reading a record once it has seen that the commit field has been set.\r\n\r\n* A writer might crash after it has updated the limit field but before it has updated the commit field. To avoid this problem there's a field next to the commit field called the rollback field. The reader has a timeout for how long it will wait for the commit field to be set. When that time is reached the reader will set the rollback field (using volatile) and continue with the next record. The rollback field has precedence over the commit field, when the rollback field is set the record is always ignored by the readers.\r\n\r\nThe solution seems to work well on Linux x86 with Oracle's JVM (1.8) but it probably won't work on all platforms. The project contains a test (called IntegrityTest) to check whether it works on the platform used.\r\n\r\n### Questions\r\n\r\nFor questions or suggestions about MappedBus feel free to drop a mail to: mappedbus@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"Mappedbus","tagline":"IPC between multiple Java processes with nanosecond latency","body":"## MappedBus is a Java based high throughput, low latency message bus, using either a memory mapped file or shared memory as transport\r\n\r\nMappedBus was inspired by [Java Chronicle](https://github.com/OpenHFT/Chronicle-Queue) with the main difference that it's designed to efficiently support multiple writers â€“ enabling use cases where the order of messages produced by multiple processes are important.\r\n\r\n<p align=\"center\">\r\n  <img src=\"http://3.bp.blogspot.com/-L51XiyruNMA/VU5K9dMtx9I/AAAAAAAAACg/AOkdwjTrzgI/s320/mappedbus.png\">\r\n</p>\r\n\r\nMappedBus can also be described as an efficient IPC mechanism which enable several Java processes/JVMs to communicate by message passing.\r\n\r\nThe throughput (on a laptop, i7-4558U @ 2.8 GHz) between a single producer writing at full speed and a single consumer is around 40 million messages per second (a small message consisting of three integer fields), and the average read/write latency is around 25 ns per message.\r\n\r\nMappedBus does not create any objects after startup and therefore has no GC impact.\r\n\r\n#### Features:\r\n* IPC between multiple processes by message passing\r\n* Support for either a memory mapped file or shared memory as transport\r\n* Support for either object or byte array (raw data) based messages","google":"UA-63315071-1","note":"Don't delete this file! It's used internally to help with page regeneration."}